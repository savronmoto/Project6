Microsoft (R) Macro Assembler Version 14.27.29111.0	    12/07/20 18:13:52
6String Primitives & Macros     (project6_hansonsa.asm	     Page 1 - 1


				TITLE String Primitives & Macros     (project6_hansonsa.asm)

				; Author:					Savanna Hanson
				; Last Modified:			4 December 2020
				; OSU email address:		hansonsa@oregonstate.edu
				; Course number/section:	CS271 Section 400
				; Project Number:			6			
				; Due Date:					6 December 2020
				; Description:				Does some stuff with string primitives.
				;							*****write more stuff here obvs*****

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------------------------------------------------
				; MACROS
				;-----------------------------------------------------------------

				mGetString MACRO prompt,inputString,maxsize,stringLength
				  ; preserve registers
				  push	EDX
				  push  ECX
				  push  EAX
				  ; display prompt 
				  mov   EDX, prompt				; prompt for a number (input parameter, by reference) - should this be my other macro? within a macro??
				  call  WriteString
				  ; get user input 
				  mov   EDX, inputString		; buffer (output parameter, by reference)
				  mov   ECX, maxsize        	; maxsize (input parameter, by value)
				  call  ReadString
				  mov	EBX, stringLength
				  mov   [EBX], EAX		        ; bytes read - (output parameter, by reference)
				  call  CrLf
				  pop	EAX
				  pop	ECX
				  pop	EDX
				ENDM

				mDisplayString MACRO userString
				  ; print string - (input parameter, by reference)
				  push  EDX
				  mov	EDX, userString
				  call	WriteString
				  pop	EDX

				ENDM

 = 00000015			MAXSIZE = 21
 = 0000000A			ARRAYSIZE = 10

 00000000			.data
 00000000 20 53 74 72 69	intro			BYTE	 " String Primitive Manipulation with Macros, by Savanna Hanson",13,10,0
	   6E 67 20 50 72
	   69 6D 69 74 69
	   76 65 20 4D 61
	   6E 69 70 75 6C
	   61 74 69 6F 6E
	   20 77 69 74 68
	   20 4D 61 63 72
	   6F 73 2C 20 62
	   79 20 53 61 76
	   61 6E 6E 61 20
	   48 61 6E 73 6F
	   6E 0D 0A 00
 00000040 50 6C 65 61 73	intro2			BYTE	 "Please enter 10 signed decimal integers."
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
 00000068  45 61 63 68 20	 				BYTE	 "Each number needs to be small enough to fit inside a 32-bit register. After you have"
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65
 000000BC  20 66 69 6E 69					BYTE	 " finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.",13,10,0
	   73 68 65 64 20
	   69 6E 70 75 74
	   74 69 6E 67 20
	   74 68 65 20 72
	   61 77 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0D 0A 00
 0000012D  00000015 [		inString		BYTE	 MAXSIZE DUP(0)	 ;User String
	    00
	   ]
 00000142 50 6C 65 61 73	prompt			BYTE	 "Please enter a signed decimal integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 3A 20 00
 0000016A 54 68 61 74 20	invalid			BYTE     "That is not a valid integer, try again.",0
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   69 6E 74 65 67
	   65 72 2C 20 74
	   72 79 20 61 67
	   61 69 6E 2E 00
 00000192 54 68 65 20 69	intLabel		BYTE     "The integers you supplied are: ",0
	   6E 74 65 67 65
	   72 73 20 79 6F
	   75 20 73 75 70
	   70 6C 69 65 64
	   20 61 72 65 3A
	   20 00
 000001B2 54 68 65 69 72	sumLabel		BYTE     "Their sum is:                  ",0
	   20 73 75 6D 20
	   69 73 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00
 000001D2 54 68 65 69 72	avgLabel		BYTE     "Their average is:              ",0
	   20 61 76 65 72
	   61 67 65 20 69
	   73 3A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00
 000001F2 00000000		sLen			DWORD	 ?
 000001F6  0000000A [		numList			SDWORD	 ARRAYSIZE DUP(?)
	    00000000
	   ]
 0000021E 00000004		typeList		DWORD    TYPE numList      ; 4 (type SDWORD = 4 bytes)
 00000222 0000000A		countList		DWORD    LENGTHOF numList  ; 
 00000226 00000000		validInt		DWORD	 ?				   ; "returns" from readVal, to be added to numList in loop
 0000022A 2C 20 00		comma			BYTE	 ", ",0
 0000022D  00000015 [		revString		BYTE     MAXSIZE DUP(0)
	    00
	   ]
 00000242  00000015 [		properString	BYTE     MAXSIZE DUP(0)
	    00
	   ]

 00000000			.code
 00000000			main PROC
 00000000  B9 0000000A		  mov	ECX, ARRAYSIZE							
				  mDisplayString OFFSET intro
 00000005  52		     1	  push  EDX
 00000006  BA 00000000 R     1	  mov	EDX, OFFSET intro
 0000000B  E8 00000000 E     1	  call	WriteString
 00000010  5A		     1	  pop	EDX
 00000011  E8 00000000 E	  call	CrLf
				  mDisplayString OFFSET intro2
 00000016  52		     1	  push  EDX
 00000017  BA 00000040 R     1	  mov	EDX, OFFSET intro2
 0000001C  E8 00000000 E     1	  call	WriteString
 00000021  5A		     1	  pop	EDX
 00000022  E8 00000000 E	  call  CrLf
 00000027  BF 000001F6 R	  mov	EDI, OFFSET numList			
 0000002C			_untilTen:							; Get 10 valid integers from the user.
 0000002C  68 00000226 R	  push	OFFSET validInt
 00000031  68 0000016A R	  push  OFFSET invalid
 00000036  68 000001F2 R	  push	OFFSET sLen
 0000003B  68 0000012D R	  push	OFFSET inString
 00000040  68 00000142 R	  push  OFFSET prompt
 00000045  E8 00000057		  call  readVal
 0000004A  8B 35 00000226 R	  mov	ESI, validInt				; this is a SDWORD integer value!
 00000050  89 37		  mov	[EDI], ESI					; Stores these numeric values in an array.
 00000052  03 3D 0000021E R	  add	EDI, typeList
 00000058  E2 D2		  LOOP	_untilTen

				  ; do math

 0000005A  B9 0000000A		  mov   ECX, ARRAYSIZE
				  mDisplayString OFFSET intLabel 
 0000005F  52		     1	  push  EDX
 00000060  BA 00000192 R     1	  mov	EDX, OFFSET intLabel
 00000065  E8 00000000 E     1	  call	WriteString
 0000006A  5A		     1	  pop	EDX
 0000006B  BE 000001F6 R	  mov	ESI, OFFSET numList
 00000070			_displayLoop:
 00000070  FC			  cld								; moving forward
 00000071  AD			  lodsd								; move first value in numList to EAX for processing
 00000072  68 00000242 R	  push  OFFSET properString
 00000077  68 0000022D R	  push  OFFSET revString
 0000007C  50			  push	EAX
 0000007D  E8 000000E1		  call  writeVal					; Display the integers, ****EVENTUALLY**** their sum, and their average.
				  mDisplayString OFFSET comma
 00000082  52		     1	  push  EDX
 00000083  BA 0000022A R     1	  mov	EDX, OFFSET comma
 00000088  E8 00000000 E     1	  call	WriteString
 0000008D  5A		     1	  pop	EDX
 0000008E  E2 E0		  LOOP	_displayLoop
 00000090  E8 00000000 E	  call  CrLf
 00000095  E8 00000000 E	  call  CrLf

				  Invoke ExitProcess,0	; exit to operating system
 0000009A  6A 00	   *	    push   +000000000h
 0000009C  E8 00000000 E   *	    call   ExitProcess
 000000A1			main ENDP


				; ---------------------------------------------------------------------------------
				; Name: readVal
				;	A method to read user input of ascii number characters and turn them into their acutal signed integer value (as a SDWORD)
				;   Validation occurs to ensure input is a number and not some other character. 
				; Preconditions:
				; Postconditions: 
				; Receives:	[EBP+24] = validInt - offset address for data label
				;			[EBP+20] = invalid - offset address
				;           [EBP+16] = sLen - offset address
				;			[EBP+12] = inString (the buffer) - offset address
				;	    	[EBP+8] = prompt - offset address
				; Returns: 
				; ---------------------------------------------------------------------------------
 000000A1			readVal PROC
				; preserve EBP
 000000A1  55			  push	EBP				
 000000A2  8B EC		  mov	EBP, ESP
				; preserve registers
 000000A4  60			  pushad

				; Invoke the mGetSring macro to get user input in the form of a string of digits.
 000000A5			_getInput:
				  mGetString [EBP+8],[EBP+12],MAXSIZE,[EBP+16]
 000000A5  52		     1	  push	EDX
 000000A6  51		     1	  push  ECX
 000000A7  50		     1	  push  EAX
 000000A8  8B 55 08	     1	  mov   EDX, [EBP+8]				; prompt for a number (input parameter, by reference) - should this be my other macro? within a macro??
 000000AB  E8 00000000 E     1	  call  WriteString
 000000B0  8B 55 0C	     1	  mov   EDX, [EBP+12]		; buffer (output parameter, by reference)
 000000B3  B9 00000015	     1	  mov   ECX, MAXSIZE        	; maxsize (input parameter, by value)
 000000B8  E8 00000000 E     1	  call  ReadString
 000000BD  8B 5D 10	     1	  mov	EBX, [EBP+16]
 000000C0  89 03	     1	  mov   [EBX], EAX		        ; bytes read - (output parameter, by reference)
 000000C2  E8 00000000 E     1	  call  CrLf
 000000C7  58		     1	  pop	EAX
 000000C8  59		     1	  pop	ECX
 000000C9  5A		     1	  pop	EDX

				; Convert (using string primitives) the string of ascii digits to its numeric value representation (SDWORD),
				; and validate the user’s input is a valid number (no letters, symbols(other than negataive), etc).
 000000CA  8B 75 10		  mov	ESI, [EBP+16]	; 
 000000CD  8B 0E		  mov   ECX, [ESI]		; set string length as counter
				;  dec   ECX
 000000CF  8B 75 0C		  mov	ESI, [EBP+12]	
 000000D2  BB 00000000		  mov   EBX, 0          ; numInt starts at 0

 000000D7  FC			  cld
 000000D8  AC			  lodsb					; bytes in inString into AL

 000000D9  3C 2D		  cmp   AL, 45			; check if char is negative sign
 000000DB  74 20		  je	_negLoop

 000000DD  3C 30		  cmp	AL, 48			; make sure it is a number char
 000000DF  7C 69		  jl	_notNum			
 000000E1  3C 39		  cmp	AL, 57
 000000E3  7F 65		  jg	_notNum
 000000E5  2C 30		  sub	AL, 48			; it IS a number digit, perform algorithm
 000000E7  0F B6 C0		  movzx EAX, AL
 000000EA  50			  push  EAX              
 000000EB  B8 0000000A		  mov   EAX, 10         
 000000F0  F7 EB		  imul	EBX             ; 10 * numInt
 000000F2  8B D8		  mov	EBX, EAX        
 000000F4  58			  pop   EAX             ; (numChar-48)
 000000F5  0F B6 C0		  movzx EAX, AL
 000000F8  03 D8		  add   EBX, EAX        ; numInt = 10 * numInt + (numChar - 48)
 000000FA  49			  dec	ECX
 000000FB  EB 25		  jmp	_posLoop

				; If it is negative:
 000000FD			_negLoop:
 000000FD  49			  dec   ECX
 000000FE  AC			  lodsb					; next char
 000000FF  3C 30		  cmp	AL, 48			; make sure it is a number char
 00000101  7C 47		  jl	_notNum			
 00000103  3C 39		  cmp	AL, 57
 00000105  7F 43		  jg	_notNum
 00000107  2C 30		  sub	AL, 48			; it IS a number digit, perform algorithm
 00000109  0F B6 C0		  movzx EAX, AL
 0000010C  50			  push  EAX              
 0000010D  B8 0000000A		  mov   EAX, 10         
 00000112  F7 EB		  imul	EBX             ; 10 * numInt
 00000114  8B D8		  mov	EBX, EAX        
 00000116  58			  pop   EAX             ; (numChar-48)
 00000117  0F B6 C0		  movzx EAX, AL
 0000011A  03 D8		  add   EBX, EAX        ; numInt = 10 * numInt + (numChar - 48)
 0000011C  E2 DF		  LOOP  _negLoop
 0000011E  F7 DB		  neg   EBX
 00000120  EB 37		  jmp	_store

 00000122			_posLoop:
 00000122  83 F9 00		  cmp   ECX, 0
 00000125  74 32		  jz	_store
 00000127  FC			  cld
 00000128  AC			  lodsb	
 00000129  3C 30		  cmp	AL, 48			; make sure it is a number char
 0000012B  7C 1D		  jl	_notNum			
 0000012D  3C 39		  cmp	AL, 57
 0000012F  7F 19		  jg	_notNum

 00000131  2C 30		  sub	AL, 48			; it IS a number digit
 00000133  0F B6 C0		  movzx EAX, AL
 00000136  50			  push  EAX              
 00000137  B8 0000000A		  mov   EAX, 10         
 0000013C  F7 EB		  imul	EBX             ; 10 * numInt
 0000013E  8B D8		  mov	EBX, EAX        
 00000140  58			  pop   EAX             ; (numChar-48)
 00000141  0F B6 C0		  movzx EAX, AL
 00000144  03 D8		  add   EBX, EAX        ; numInt = 10 * numInt + (numChar - 48)
 00000146  E2 DA		  LOOP	_posloop
 00000148  EB 0F		  jmp	_store
 0000014A			_notNum:
				  mDisplayString [EBP+20]
 0000014A  52		     1	  push  EDX
 0000014B  8B 55 14	     1	  mov	EDX, [EBP+20]
 0000014E  E8 00000000 E     1	  call	WriteString
 00000153  5A		     1	  pop	EDX
 00000154  E9 FFFFFF4C		  jmp	_getInput
 00000159			_store: 
				; Store this value in a memory variable (output parameter, by reference). 
 00000159  8B 7D 18		  mov	EDI, [EBP+24]	; validInt address into EDI  ;
 0000015C  89 1F		  mov	[EDI], EBX		; numInt is the value at that address
				  
 0000015E  61			  popad
 0000015F  5D			  pop	EBP 

 00000160  C2 0014		  ret   20
 00000163			readVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: writeVal
				;	Convert a numeric SDWORD value (input parameter, by value) to a string of ascii digits
				; Postconditions:
				; Receives: [EBP+16] = properString - by reference - output pararmeter
				;			[EBP+12] = revString - by reference   	
				;			[EBP+8] = EAX (nth element of numList) - input parameter, by value - SDWORD
				; Returns: 
				; ---------------------------------------------------------------------------------
 00000163			writeVal PROC
				; preserve EBP
 00000163  55			  push	EBP				
 00000164  8B EC		  mov	EBP, ESP
				; preserve registers
 00000166  60			  pushad

				; to check if the SDWORD is negative, check the hex MSB, if it is 8 or higher the number is negative. or in decimal it would be 2147483648 or greater

				; If the SDWORD is negative, first add the ascii character for -, whichi is 45 (2Dh) ***********DO NEG PART*********

				; then for each digit, divide by 10. the remainder plus 48 is the ascii code for the digit.
 00000167  BB 0000000A		  mov   EBX, 10
 0000016C  8B 45 08		  mov   EAX, [EBP+8]		 ; move element of numList into dividend
 0000016F  B9 00000000		  mov   ECX, 0				 ; counter
 00000174  8B 7D 0C		  mov   EDI, [EBP+12]		 ; EDI points to address of outString I CAN DO THE STORSB thing now because i have a byte array. and use redfield's reversal algo.
 00000177			_divLoop:  
 00000177  99			  cdq
 00000178  F7 FB		  idiv  EBX					 ; EAX/EBX = q: EAX r: EDX
 0000017A  83 C2 30		  add   EDX, 48
 0000017D  50			  push  EAX					 ; to save the quotient
 0000017E  8B C2		  mov   EAX, EDX			 ; move the num we want to EAX so we can use STOSD
 00000180  AA			  stosb						 ; puts EAX val into [EDI] and increments EDI ****should this be stosD?????
 00000181  58			  pop   EAX
				;  push EDX
				;  mov  [EDI], EDX	
 00000182  41			  inc   ECX
 00000183  83 F8 00		  cmp   EAX, 0				 ; if quotient is 0 we can stop
 00000186  75 EF		  jnz  _divLoop				 ; then do it again. divide the quotient by 10, and the remainder plus 48 is the second to last digit. and so on.

 00000188  51			  push  ECX					 ; save the string's length!

				;reverse so it's proper:
 00000189  8B 75 0C		  mov   ESI, [EBP+12]
 0000018C  03 F1		  add   ESI, ECX
 0000018E  4E			  dec   ESI
 0000018F  8B 7D 10		  mov   EDI, [EBP+16]
 00000192			 _revLoop:
 00000192  FD			  std
 00000193  AC			  lodsb
 00000194  FC			  cld
 00000195  AA			  stosb
 00000196  E2 FA		  LOOP   _revLoop
				;add the null terminator:
 00000198  59			  pop   ECX
 00000199  8B 7D 10		  mov   EDI, [EBP+16]
 0000019C  03 F9		  add   EDI, ECX			 ; add the length to get to the end of the string
 0000019E  B8 00000000		  mov	EAX, 0
 000001A3  89 07		  mov	[EDI], EAX			 ; add the null terminator 0

				;write
				  mDisplayString [EBP+16]	 ; Invoke the mDisplayString macro to print the ascii representation of the SDWORD value to the output.
 000001A5  52		     1	  push  EDX
 000001A6  8B 55 10	     1	  mov	EDX, [EBP+16]
 000001A9  E8 00000000 E     1	  call	WriteString
 000001AE  5A		     1	  pop	EDX

 000001AF  61			  popad						 ; restore registers
 000001B0  5D			  pop   EBP
 000001B1  C2 000C		  ret   12
 000001B4			writeVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.27.29111.0	    12/07/20 18:13:52
6String Primitives & Macros     (project6_hansonsa.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000257 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001B4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A1 Public STDCALL
  _untilTen  . . . . . . . . . .	L Near	 0000002C _TEXT	
  _displayLoop . . . . . . . . .	L Near	 00000070 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000A1 _TEXT	Length= 000000C2 Public STDCALL
  _getInput  . . . . . . . . . .	L Near	 000000A5 _TEXT	
  _negLoop . . . . . . . . . . .	L Near	 000000FD _TEXT	
  _posLoop . . . . . . . . . . .	L Near	 00000122 _TEXT	
  _notNum  . . . . . . . . . . .	L Near	 0000014A _TEXT	
  _store . . . . . . . . . . . .	L Near	 00000159 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 00000163 _TEXT	Length= 00000051 Public STDCALL
  _divLoop . . . . . . . . . . .	L Near	 00000177 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000192 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 00000015h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgLabel . . . . . . . . . . . .	Byte	 000001D2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 0000022A _DATA	
countList  . . . . . . . . . . .	DWord	 00000222 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inString . . . . . . . . . . . .	Byte	 0000012D _DATA	
intLabel . . . . . . . . . . . .	Byte	 00000192 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000040 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
invalid  . . . . . . . . . . . .	Byte	 0000016A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numList  . . . . . . . . . . . .	DWord	 000001F6 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000142 _DATA	
properString . . . . . . . . . .	Byte	 00000242 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
revString  . . . . . . . . . . .	Byte	 0000022D _DATA	
sLen . . . . . . . . . . . . . .	DWord	 000001F2 _DATA	
sumLabel . . . . . . . . . . . .	Byte	 000001B2 _DATA	
typeList . . . . . . . . . . . .	DWord	 0000021E _DATA	
validInt . . . . . . . . . . . .	DWord	 00000226 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
